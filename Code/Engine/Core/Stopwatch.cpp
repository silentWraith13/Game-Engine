#include "Engine/Core/Stopwatch.hpp"
#include "Engine/Core/Clock.hpp"

//--------------------------------------------------------------------------------------------------------------------------------------------------------
Stopwatch::Stopwatch(float duration)
	: m_clock(&Clock::GetSytemClock() ), m_duration( duration )			
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
Stopwatch::Stopwatch(const Clock* clock, float duration)
	: m_clock(clock),
	m_duration(duration)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
Stopwatch::Stopwatch()
{

}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Stopwatch::Start()
{
	m_startTime = m_clock->GetTotalSeconds();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Stopwatch::Restart()		
{
	if (!IsStopped()) 
	{
		m_startTime = m_clock->GetTotalSeconds();
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Stopwatch::Stop()
{
	m_startTime = 0.f;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
float Stopwatch::GetElapsedTime() const
{
	if ( IsStopped() )
	{
		return 0.f;
	}
	return	(m_clock->GetTotalSeconds() - m_startTime);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
float Stopwatch::GetElapsedFraction() const
{
	float elapsedFraction = GetElapsedTime() / m_duration;
	if ( elapsedFraction > 0.f )
	{
		return elapsedFraction;
	}
	else
	{
		return 0.f;
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
bool Stopwatch::IsStopped() const
{
	if ( m_startTime == 0.f )
	{
		return true;
	}
	else
	{
		return false;
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
bool Stopwatch::HasDurationElapsed() const
{
	if ( ( !IsStopped() ) && ( GetElapsedTime() > m_duration) )
	{
		return true;
	}
	else
	{
		return false;
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
void Stopwatch::SetDuration(float duration)
{
	m_duration = duration;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
bool Stopwatch::DecrementDurationIfElapsed()
{
	if (( HasDurationElapsed() ) && ( !IsStopped() ))
	{
		m_startTime += m_duration;
		return true;
	}

	return false;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------
